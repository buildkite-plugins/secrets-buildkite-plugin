#!/bin/bash
set -euo pipefail

# downloads the secret by provided key using the buildkite-agent secret command
downloadSecret() {
    local key=$1

    if ! secret=$(buildkite-agent secret get "${key}"); then
        echo "not found ${key}"
    else
        echo "${secret}"
    fi

}

# decodes a base64 encoded secret, expects decoded secret to be in the format KEY=value:
# FOO=BAR
# BAR=BAZ
decodeSecrets() {
    local encoded_secret=$1
    envscript=''

    while IFS='=' read -r key value
        do
            # Check if both key and value are non-empty
            if [ -n "$key" ] && [ -n "$value" ]; then
                # Update envscript
                envscript+="${key}=${value}"$'\n'
            fi
    done <<< "$(echo "$encoded_secret" | base64 -d)"

    echo "$envscript"
}

# decodes the base64 encoded secret passed in args, and exports the decoded secrets
# into the environment via the envscript variable
processSecrets() {
    local encoded_secret=$1
    local envscript=''

    if ! envscript=$(decodeSecrets "${encoded_secret}"); then
        echo "⚠️ Unable to decode secrets"
        exit 1
    fi

    # I don't think this echo is really needed outside of debugging during development
    # so going to comment out for now and we can always re-evaluate it's usefulness later
    # echo "Evaluating ${#envscript} bytes of env"
    set -o allexport
    eval "$envscript"
    set +o allexport
}

processVariables() {
  # Extract the environment variable keys and Buildkite secret paths.
  for param in ${!BUILDKITE_PLUGIN_SECRETS_VARIABLES_*}; do
    key="${param/BUILDKITE_PLUGIN_SECRETS_VARIABLES_/}"
    path="${!param}"

    if ! value=$(buildkite-agent secret get "${path}"); then
        echo "⚠️ Unable to find secret at ${path}"
        exit 1
    else
        export "${key}=${value}"
    fi
  done
}

# primarily used for debugging; The job log will show what env vars have changed after this hook is executed
dumpEnvSecrets() {
  if [[ "${BUILDKITE_PLUGIN_SECRETS_DUMP_ENV:-}" =~ ^(true|1)$ ]] ; then
    echo "~~~ 🔎 Environment variables that were set" >&2;
    comm -13 <(echo "$env_before") <(env | sort) || true
  fi
}


env_before="$(env | sort)" # used by


echo "🔐 Fetching env secrets from Buildkite secrets"
# If we are using a specific key we should download and evaluate it
if [[ -n "${BUILDKITE_PLUGIN_SECRETS_ENV:-env}" ]]; then
    secret=$(downloadSecret "${BUILDKITE_PLUGIN_SECRETS_ENV:-env}")
    if [[ "${secret}" =~ "not found" ]]; then
        echo "No secret found at ${BUILDKITE_PLUGIN_SECRETS_ENV:-env}"
    else
        processSecrets "${secret}"
    fi
fi

# Now download and set ENV specified using the `variables` plugin param
processVariables

dumpEnvSecrets
